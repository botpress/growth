name: Check Integration Plus Prefix

on: pull_request

jobs:
  check-integration-plus-prefix:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
      
      - name: Create integration validation script
        run: |
          cat > ./validate-integration-plus-prefix.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          function validateIntegration(integrationPath) {
            const errors = [];
            
            // CHECKING IF PACKAGE.JSON EXISTS

            const packageJsonPath = path.join(integrationPath, 'package.json');
            let packageJson = null;
            if (fs.existsSync(packageJsonPath)) {
              try {
                packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
                
                // CHECKING IF INTEGRATION NAME EXISTS AND STARTS WITH PLUS/

                if (!packageJson.integrationName) {
                  errors.push(`Missing 'integrationName' in package.json`);
                } else if (!packageJson.integrationName.startsWith('plus/')) {
                  errors.push(`'integrationName' in package.json must start with 'plus/' prefix, found: ${packageJson.integrationName}`);
                }
              } catch (err) {
                errors.push(`Error parsing package.json: ${err.message}`);
              }
            } else {
              errors.push('package.json file not found');
            }
            
            // CHECKING IF INTEGRATION.DEFINITION.TS EXISTS
            
            const definitionPath = path.join(integrationPath, 'integration.definition.ts');
            if (fs.existsSync(definitionPath)) {
              try {
                const definition = fs.readFileSync(definitionPath, 'utf8');
                
                // CHECKING IF NAME PROPERTY WITH PLUS/ PREFIX EXISTS
                
                const nameMatch = definition.match(/name:\s*['"]([^'"]+)['"]/);
                const nameVarMatch = definition.match(/name:\s*integrationName/);
                
                if (!nameMatch && !nameVarMatch) {
                  errors.push('Could not find "name" property in integration.definition.ts');
                } else if (nameMatch && !nameMatch[1].startsWith('plus/')) {
                  errors.push(`"name" in integration.definition.ts must start with 'plus/' prefix, found: ${nameMatch[1]}`);
                } else if (nameVarMatch && packageJson) {
                  if (!packageJson.integrationName) {
                    errors.push('Using integrationName in definition but missing in package.json');
                  } else if (!packageJson.integrationName.startsWith('plus/')) {
                    errors.push(`'integrationName' in package.json must start with 'plus/' prefix, found: ${packageJson.integrationName}`);
                  }
                }
                
                // CHECKING IF TITLE PROPERTY EXISTS
                
                const titleMatch = definition.match(/title:\s*['"]([^'"]+)['"]/);
                if (!titleMatch) {
                  errors.push('Could not find "title" property in integration.definition.ts');
                }
              } catch (err) {
                errors.push(`Error reading integration.definition.ts: ${err.message}`);
              }
            } else {
              errors.push('integration.definition.ts file not found');
            }
            
            return errors;
          }

          const integrationsDir = './integrations';
          const integrationDirs = fs.readdirSync(integrationsDir)
            .filter(file => fs.statSync(path.join(integrationsDir, file)).isDirectory());
          
          let validationFailed = false;
          
          integrationDirs.forEach(integration => {
            const integrationPath = path.join(integrationsDir, integration);
            const errors = validateIntegration(integrationPath);
            
            if (errors.length > 0) {
              console.error(`❌ Validation failed for ${integration}:`);
              errors.forEach(error => console.error(`  - ${error}`));
              validationFailed = true;
            } else {
              console.log(`✅ Integration ${integration} passed validation`);
            }
          });
          
          if (validationFailed) {
            process.exit(1);
          }
          EOF
          
          chmod +x ./validate-integration-plus-prefix.js
      
      - name: Check all integrations
        run: node ./validate-integration-plus-prefix.js